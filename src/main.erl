%%%-------------------------------------------------------------------
%%% @author vladimir
%%% @copyright (C) 2020, <3CRABS>
%%% @doc
%%% Программа вычисляющая обратную матрицу.
%%% @end
%%% Created : 14. февр. 2020 21:24
%%%-------------------------------------------------------------------
-module(main).
-author("vladimir").
-include_lib("eunit/include/eunit.hrl").

det([[A11, A12], [A21, A22]]) -> A11 * A22 - A12 * A21.

rmRow([], _) -> [];
rmRow([_|T], 0) -> T;
rmRow([H|T], I) -> [H|rmRow(T, I-1)].

rmCol(A, I) -> lists:map(fun(X) -> rmRow(X, I) end, A).

%% Удаление строки и столбца
rm(A, I, J) -> rmCol(rmRow(A, I), J).

getRow([], _) -> [];
getRow([H|_], 0) -> H;
getRow([_|T], I) -> getRow(T, I-1).

%% Поиск элемента
get(A, I, J) -> getRow(getRow(A, I), J).

%% Поиск элемента
m(A, I, J) ->
 if (I + J) rem 2 == 0 -> det(rm(A, I, J));
    (I + J) rem 2 == 1 -> det(rm(A, I, J)) * (-1) end.

%% Поиск транспонированой к обратной матрице
f1(_, [], _, _) -> [];
f1(A, [_|T], I, J) -> [m(A, I, J) | f1(A, T, I, J+1)].
f(A) -> f0(A, A, 0, 0).
f0(_, [], _, _) -> [];
f0(A, [H|T], I, J) -> [f1(A, H, I, J) | f0(A, T, I+1, J)].

%% Транспонирование
t1(_, [], _, _) -> [];
t1(A, [_|T], I, J) -> [get(A, J, I) | t1(A, T, I, J+1)].
t(A) -> t0(A, A, 0, 0).
t0(_, [], _, _) -> [];
t0(A, [H|T], I, J) -> [t1(A, H, I, J) | t0(A, T, I+1, J)].

%% Функция поиска обратной матрицы
main(A) -> t(f(A)).

det_test() ->
  [
   ?assertEqual(det([[1, 0], [0, 1]]), 1),
   ?assertEqual(det([[1, 1], [0, 1]]), 1),
   ?assertEqual(det([[1, 1], [1, 1]]), 0),
   ?assertEqual(det([[0, 1], [0, 0]]), 0),

   ?assertEqual(rmRow([[1, 2], [3, 4]], 0), [[3, 4]]),
   ?assertEqual(rmRow([1, 2, 3], 0), [2, 3]),
   ?assertEqual(rmRow([1, 2, 3], 1), [1, 3]),

   ?assertEqual(rmCol([[1, 2], [3, 4]], 0), [[2], [4]]),
   ?assertEqual(rmCol([[1, 2], [3, 4]], 1), [[1], [3]]),

   ?assertEqual(rm([[1, 2], [3, 4]], 0, 0), [[4]]),
   ?assertEqual(rm([[1, 2], [3, 4]], 1, 1), [[1]]),
   ?assertEqual(rm([[1, 2], [3, 4]], 0, 1), [[3]]),
   ?assertEqual(rm([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 0, 2), [[0, 1], [0, 0]]),

   ?assertEqual(getRow([[1, 2], [3, 4]], 0), [1, 2]),
   ?assertEqual(getRow([[1, 2], [3, 4]], 1), [3, 4]),
   ?assertEqual(getRow([1, 2], 0), 1),
   ?assertEqual(getRow([1, 2], 1), 2),

   ?assertEqual(get([[1, 2], [3, 4]], 0, 0), 1),
   ?assertEqual(get([[1, 2], [3, 4]], 0, 1), 2),
   ?assertEqual(get([[1, 2], [3, 4]], 1, 0), 3),
   ?assertEqual(get([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 0, 2), -1),

   ?assertEqual(m([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0, 0), -3),
   ?assertEqual(m([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0, 1), 6),

   ?assertEqual(m([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 0, 0), 1),
   ?assertEqual(m([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 0, 1), 0),
   ?assertEqual(m([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 0, 2), 0),

   ?assertEqual(m([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 1, 0), 0),
   ?assertEqual(m([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 1, 1), 1),
   ?assertEqual(m([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 1, 2), 0),

   ?assertEqual(m([[1, 0, -1], [0, 1, 0], [0, 0, 1]], 2, 0), 1),

   ?assertEqual(f1([[1, 0, -1], [0, 1, 0], [0, 0, 1]], [1, 0, -1], 0, 0), [1, 0, 0]),
   ?assertEqual(f1([[1, 0, -1], [0, 1, 0], [0, 0, 1]], [0, 1, 0], 1, 0), [0, 1, 0]),
   ?assertEqual(f1([[1, 0, -1], [0, 1, 0], [0, 0, 1]], [0, 0, 1], 2, 0), [1, 0, 1]),

   ?assertEqual(f([[1, 0, -1], [0, 1, 0], [0, 0, 1]]), [[1, 0, 0], [0, 1, 0], [1, 0, 1]]),

   ?assertEqual(t([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), [[1, 0, 0], [0, 1, 0], [0, 0, 1]]),
   ?assertEqual(t([[1, 0, 1], [0, 1, 0], [0, 0, 1]]), [[1, 0, 0], [0, 1, 0], [1, 0, 1]]),
   ?assertEqual(t([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 4, 7], [2, 5, 8], [3, 6, 9]])
   ].
